packages:
1- npm i react-router-dom react-tostify
Navlink comp - extra class - active


------>backend folder<-------
open integrated terminal.
running two terminals at the same time one for frontend one for backend
create a server.js file in backend folder
type 'npm init' in backend terminal
remove test script from package.json
install some dependenciesin backend terminal:
npm i cors dotenv express jsonwebtoken mongoose multer nodemon razorpay stripe validator cloudinary bcrypt

Package description:
cors - allow the frontend ip to access backend
dotenv - to use environmental variables in project
express - to create API's
jsonwebtoken - to enable user authentication -> user will login
mongoose - to manage database connectivity
multer - to store the images on our cloudinary storage
nodemon - restart the backend whenever we make any changes in the code
razorpay, stripe - to setup online payment integration
validator - to check that the data coming from the user is valid or not
bcrypt - to encrypt the user password and store in our database

---->folder structure of backend------>
config folder -> to store all the configurations
middleware folder -> store all backend middleware
model folder -> store the models of my mongoose where i will define the schema
controllers folder -> manage all the logic of my backend
routes folder -> will manage the express server's routes

write a script in backage.json
"server": "nodemon server.js"
so run backend by "npm run server"
also set "type": "module" to use the import statement
now create a basic server in server.js file
install extension "Thunder client" to test API's just like postman
make a get request there
