// logic for user login and account creation
import userModel from "../models/userModel.js"
import validator from "validator"
import jwt from 'jsonwebtoken'
import bcrypt from "bcrypt"

const createToken = (id) => {
    return jwt.sign({id},process.env.JWT_SECRET)
}

// Route for user login
const loginUser = async (req, res) => {
    try {
        const { email, password} = req.body;

        const user = await userModel.findOne({email})
        if (!user) { // user not available in DB
            return res.json({success:false, message:"User does'nt exist"})
        }

        // if user available then match the password
        const isMatch = await bcrypt.compare(password, user.password) // user.password is password saved in DB
        
        if (isMatch) {
            const token = createToken(user._id)
            res.json({success:true, token})
        }
        else {
            res.json({success:false, message: "Invalid credentials"})
        }
    } catch (error) {
        console.log(error)
        res.json({success:false, message:error.message})
    }
}

// Route for user register
const registerUser = async (req, res) => {
    // res.json({msg: "Register API working"})
    try {
        // first get the name email from req.body
        const { name, email, password } = req.body;
        // checking user already exist or not
        const exists = await userModel.findOne({email})
        if  (exists) {
            return res.json({success:false, message:"User already exists"})
        }

        // validating email format & strong password
        if (!validator.isEmail(email)) {
            return res.json({success:false, message:"Please enter a valid email"})
        }
        if(password.length < 8) {
            return res.json({success:false, message:"Please enter a strong password"})
        }

        // hash password using bcrypt package
        const salt = await bcrypt.genSalt(10) // larger the number -> more time will be taken to encrypt the password
        const hashedPassword = await bcrypt.hash(password,salt)

        // creating user
        const newUser = new userModel({
            name,
            email,
            password: hashedPassword
        })

        // save user in DB
        const user = await newUser.save() // _id property is generated by default whenever a user is created using this id i will generate token

        // after storing  user in DB
        // providing token -> using this user can login
        const token = createToken(user._id)

        res.json({success:true, token})
    } catch (error) {
        console.log(error)
        res.json({success:false, message:error.message})
    }
}

// Route for admin login
const adminLogin = async () => {

}

// created three controller func's now using this i will create route

export { loginUser, registerUser, adminLogin }